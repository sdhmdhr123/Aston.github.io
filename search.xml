<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git bash、cygwin、minGW、shell、cmd]]></title>
    <url>%2FAston.github.io%2F2018%2F04%2F12%2Fbash%E3%80%81cygwin%E3%80%81minGW%2F</url>
    <content type="text"><![CDATA[git bash、cygwin、minGW、shell 一天弄懂一件事最近在装physionew的开发包（WFDB software package）时,我遇到了需要安装cygwin minGW才能安装的情况，我通过了解这两个编译环境，发现和gitbash很像。。于是乎我试了一下gitbash行不行……结果是不行的，所以他们其中的区别是什么呢？ 首先我们要先了解一下这几个东西，首先先给个我个人理解上的定义便于我们总结，其实呢这几个东西都可以认作shell，一个“壳”，功能是为操作电脑硬件系统提供一个平台、一个界面，你可以从这个界面操作你的电脑执行你的命令。然后他们的不同点就是集成的操作环境不太一样，即一些操作符还有一些规则不太一样。 cmd是command的缩写，翻译过来是命令提示符，是一种基于dos系统的命令行程序，一般都在windows系统下面用，功能上基本上是这几个里面最弱的了吧。。。基本上人家有的他们有 ，他有的别的都有。 shell：是运行在linux系统的“cmd”，但是功能要强大很多，接近于一门语言。 git bash：其实是为了在cmd的基础上封装了一些unix下的命令脚本，以及一些git自己相关的脚本 cygwin：当看到cygwin的时候我一下就想到了git bash 想着能不能直接用git bash，毕竟装那么多环境我会感觉很混乱，然后试了一下，出错，说是缺少gcc包什么的，看来相比较起来，cygwin在windows模拟linux环境上还是更胜一筹。 minGW：和cygwin功能上类似，但是实现方法貌似不一样。没打算用就没过多关注。 后记：cygwin占空间很大，大概10G+的样子这还是我只装了一个devel包的情况下，后来在想运行wfdb的时候，说还缺少其他的包，我就索性把它删了直接用服务器好了，但是有个致命的问题。。。最后cygwin的那个数据包竟然删不掉，原因是系统正在运行cygwin，wtf？我都删了好伐。。。看了很多文章都是说删了注册表或者用安装过程中把install改成uninstall就行，最后也不成功。。360的强力删除也不行，目前的结果只能是放任这个包占用着3G的空间不管他了，，，还好我的强迫症并不严重。。。]]></content>
      <tags>
        <tag>GNU</tag>
        <tag>环境</tag>
        <tag>编译器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tensorflow理解]]></title>
    <url>%2FAston.github.io%2F2018%2F04%2F12%2Ftensorflow%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[以前一直没搞明白tensorflow的概念，现在好像又多了一点点理解。 tensor代表张量，但是只是保存的计算过程，并不是真正的数据，包含的内容是名称，类型，维度，但是只是一个过程，没有具体的数字。flow当然就是数据流过这些过程，然后输出一个结果。 所以呢，tensorflow的概念就是也是一个包，框架框架的感觉有点晕晕的，框架和库其实是一种抽象的描述，即框架是你可以拿来进行二次开发的一个基础，而库是一个工具箱，他们和包有点类似于平行的概念，包里可以有框架和库。 有人说了scikit-learn不也是一个机器学习包，也是封装了一些现成算法，和tensorflow有什么区别呢？诶，区别还真有，第一他是个包，所以就没有tensorflow的运算特性了，不能用GPU，所以呢就是运行比较慢。同时，就目前而言的我的理解，scikit-learn只是封装算法，你到时候可以调用，其他的该你自己写还是你自己写，而tensorflow呢是搭乐高积木，一块搭一块（但其实我感觉写起来还是自己写）。但是呢，scikit-learn的功能其实是比tensorflow更齐全的，在这个方面可以把tensorflow看成python，scikit-learn是c++，就是有点类似这么个区别。]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[当conda找不到所需要的包时]]></title>
    <url>%2FAston.github.io%2F2018%2F04%2F12%2F%E5%BD%93conda%E6%89%BE%E4%B8%8D%E5%88%B0%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85%E6%97%B6%2F</url>
    <content type="text"><![CDATA[比如找不到 pyqt5anaconda search -t conda pyqt5会得到一堆列表Packages: Name | Version | Package Types | Platforms ------------------------- | ------ | --------------- | --------------- abergeron/pyqt5 | 5.4.1 | conda | osx-64 andreas-h/pyqt5 | 5.3.2 | conda | linux-64, win-64, osx-64 asmeurer/pyqt5 | 5.3.2 | conda | osx-64 astrofrog/pyqt5 | 5.5.0 | conda | linux-64 … Run ‘anaconda show ‘ to get installation details(my_research) root@iZwz9194z8s66bnyjsuuagZ:~# anaconda show conda-forge/wfdb]]></content>
      <categories>
        <category>参考</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux下的fish]]></title>
    <url>%2FAston.github.io%2F2018%2F04%2F12%2Ffish%2F</url>
    <content type="text"><![CDATA[一、简介Fish 是”the friendly interactive shell”的简称，最大特点就是方便易用。很多其他 Shell 需要配置才有的功能，Fish 默认提供，不需要任何配置。 如果你想拥有一个方便好用的 Shell，又不想学习一大堆语法，或者花费很多时间配置，那么你一定要尝试一下 Fish。 二、安装Ubuntu 和 Debian 的安装方法。 12&gt; $ sudo apt-get install fish&gt; Mac 的安装方法。 12&gt; $ brew install fish&gt; 其他系统的安装请参考官方网站。 三、启动与帮助安装完成后，就可以启动 Fish。 12&gt; $ fish&gt; 由于 Fish 的语法与 Bash 有很大差异，Bash 脚本一般不兼容。因此，我建议不要将 Fish 设为默认 Shell，而是每次手动启动它。 使用过程中，如果需要帮助，可以输入help命令。浏览器就会自动打开，显示在线文档。 12&gt; $ help&gt; 四、彩色显示进入 Fish 以后，你注意到的第一件事，可能就是它默认彩色显示。 123456&gt; # 无效命令为红色&gt; $ mkd&gt;&gt; # 有效命令为蓝色&gt; $ mkdir&gt; 有效路径会有下划线。 12&gt; $ cat ~/somefi &gt; 上面代码表示，存在以~/somefi开头的路径。如果没有下划线，你就知道这个路径不存在。 五、自动建议Fish 会自动在光标后面给出建议，表示可能的选项，颜色为灰色。 123456789&gt; # 命令建议&gt; $ /bin/hostname&gt;&gt; # 参数建议&gt; $ grep --ignore-case&gt;&gt; # 路径建议&gt; $ ls node_modules&gt; 如果采纳建议，可以按下→或Control + F。如果只采纳一部分，可以按下Alt + →。 六、自动补全输入命令时，Fish 会自动显示匹配的上一条历史记录。 12&gt; $ git commit -m "feat: first commit"&gt; 如果没有匹配的历史记录，Fish 会猜测可能的结果，自动补全各种输入。比如，输入pyt再按下Tab，就会自动补全为python命令。 如果有多个可能的结果，Fish 会把它们都列出，还带有简要介绍。 12345678&gt; $ vi[按下 Tab 键]&gt;&gt; vi (Executable link, 2.7MB)&gt; view (Vi IMproved, 一个程序员的文本编辑器)&gt; viewer.py (Executable, 967B)&gt; viewres (Graphical class browser for Xt)&gt; ...and 12 more rows&gt; 这时，再按一次tab，就可以在这些命令之中选择。 除了补全命令，Fish 还可以补全参数。比如，ls命令的-l参数后面按下Tab键，就会显示可以连用的其他参数。 1234567&gt; $ ls -l[按下 Tab 键]&gt;&gt; -l1 (List one file per line)&gt; -lA (Show hidden except . and ..) &gt; -la (Show hidden)&gt; -lB (Ignore files ending with ~)&gt; ...and 16 more rows 1234Fish 还可以自动补全 Git 分支。&gt; $ git checkout master12345678## 七、易懂的语法Fish 的语法非常自然，一眼就能看懂。`if`语句。&gt; if grep fish /etc/shells echo Found fishelse if grep bash /etc/shells echo Found bashelse echo Got nothingend1234`switch`语句。&gt; switch (uname)case Linux echo Hi Tux!case Darwin echo Hi Hexley!case FreeBSD NetBSD DragonFly echo Hi Beastie!case ‘*’ echo Hi, stranger!end1234`while`循环。&gt; while true echo “Loop forever”end1234`for`循环。&gt; for file in *.txt cp $file $file.bakend123456## 八、函数Fish 的函数用来封装命令，或者为现有的命令起别名。&gt; function ll ls -lhG $argvend123456上面代码定义了一个`ll`函数。命令行执行这个函数以后，就可以用`ll`命令替代`ls -lhG`。其中，变量`$argv`表示函数的参数。下面是另一个例子。&gt; function ls command ls -hG $argvend12345678上面的代码重新定义`ls`命令。注意，函数体内的`ls`之前，要加上`command`，否则会因为无限循环而报错。## 九、提示符`fish_prompt`函数用于定义命令行提示符（prompt）。&gt; function fish_prompt set_color purple date “+%m/%d/%y” set_color FF0 echo (pwd) ‘&gt;’ set_color normalend1234执行上面的函数以后，你的命令行提示符就会变成下面这样。&gt; 02/06/13/home/tutorial &gt;12345678910## 十、配置Fish 的配置文件是`~/.config/fish/config.fish`，每次 Fish 启动，就会自动加载这个文件。我们可以在这个文件里面写入各种自定义函数，它们会被自动加载。比如，上面的`fish_prompt`函数就可以写在这个文件里面，这样每次启动 Fish，就会出现自定义的提示符。Fish 还提供 Web 界面配置该文件。&gt; $ fish_config``` 输入上面的命令以后，浏览器就会自动打开本机的 8000 端口，用户可以在网页上对 Fish 进行配置，比如选择提示符和配色主题。]]></content>
      <categories>
        <category>参考</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[应聘华为实习生]]></title>
    <url>%2FAston.github.io%2F2018%2F04%2F02%2F%E5%BA%94%E8%81%98%E5%8D%8E%E4%B8%BA%E5%AE%9E%E4%B9%A0%E7%94%9F%2F</url>
    <content type="text"><![CDATA[华为实习生应聘经历、 今年大概3月份吧，华为应该是最早的来我们学校来宣讲的，宣讲的时候讲了好多优惠条件，比如实习工资6000、面试笔试不过不影响秋招，面试过了不去到秋招的时候也可以免去前面步骤直接终面。同时由于我老师又不管我，所以打算试一试找个研发岗的实习。 大概在截止日之前我提交了自己的简历，emm……生物狗转行，申算法工程师，项目经历和实践经历都是空白，只填了个人信息和教育经历。不过还得说母校牌子是真滴好用，没几天就通知我笔试。 ###笔试 说起笔试，还是有点波折的，一开始华为发给我的笔试通知附带了模拟题和最后实际操作的链接，我看了一眼模拟题，竟然有只允许用C写的程序，瞬间就没有斗志了，又考虑到笔试那天晚上有课，就选了不参加。 后来打听了一下其他的同学应聘这个岗的，发现他们也都不会做，而且说三道题只要做对一道就可以。。。。。。。wtf，我以为正常电子的或者稍微比我对口的专业写这个都该是手到擒来，结果都是摸着石头过河。。。白瞎了我对他们对口专业学生的仰望。。。。 不过还好，因为我上次选择了不参加，华为又发了一封邮件让我重新测试。emm这次其实还是没谱，但最主要的一点是我发现牛客网编程题是可以切出网页的，那就意味着有些用法可以现查，这就大大减轻了我的负担。而且人家华为又给我一次机会，这次说啥也不能不去了，虽然还是tmd周三又有课。 最后我从三个题里选了个最简单的写完了就直接交卷了，然后就去上课了。过程emm大概也就40来分钟。其实这三道题第一道我没看懂题目直接跳过，第三道其实也挺简单，但是为了上课（没错我就是这么爱学习）就也没做，反正一道就可以，点到为止，给他笔试题一个面子。后来我又看了他们第一次笔试的题，，比我的难多了，，，我命真好。。。 大概不到一周吧，面试通知就发过来了，4.1喜来登酒店建议着西装。。。 面试还沉浸于过了笔试的喜悦之中的我收集了一下算法岗的面试题的范围。。。。。。。也太多了把，混过了笔试还有这么难的面试，通知和面试时间隔了两天半，我打算趁此突击一下。 第一天，充满干劲，哇这个好厉害，可能考，哇那个好厉害，也可能考 第二天……看个球……弃疗，还是打游戏把。。。 不过还好，我还有一手，因为我是下午面试，所以能跟上午的同学问问大概问的啥。有一个同学告诉我他的题目是手写遍历二叉树，然后在排个序。还有一个是弄一个网络，&amp;&amp;！？？？**（——（&amp;&amp; 根本没看懂，也没记住，虽然已经弃疗了，我还是抱着侥幸心理看了一下python的二叉树遍历和实现，然后自己写了个冒泡和快排，然后我表示我已经尽力了，三分天注定，七分靠打拼，剩下的90分就看脸了。 华为通知写了个建议着西装，我借了半天也没借全一套。心一横：哥是谁，就是这么特立独行。我穿着休闲装去了。。。去了之后发现4/5都是西装革履，，， 去的过程中，还和同行的同学聊了一下，他说二叉树很简单呀，我可以发你看一下，然后我就又看了一遍。到了面试现场，之前和我一直有联系的HR小哥人特别好，跟我聊了聊，说别紧张，没事，就是考冒泡二叉树之类的，你放轻松，稍微准备准备就行，所以我就叒看了一遍二叉树。结果你猜怎么，TMD还真就考了二叉树 ，我的运气是真的好。。。。。 不过也不仅仅是二叉树了，二叉树之后又写了两个变形，排了一下序，又填充了一下二叉树，还用上了我现看的队列。。（我是真的运气好）。过程中面试官见到我的简历都很尴尬，没什么问的，就只能让我写算法。。。所以我一面很快，二十分钟就完了，正常有项目的话大概30分钟以上。 然后就是二面了，基本就是聊了聊基本情况，聊了一下科研和工作意向啥的。具体细节也忘了，虽然面试官笑呵呵的，但是我对他印象不是很好，可能是他在考察我什么东西所以有些问题问的比较尖锐把。 再后来说让我回来等信息，我听说大概两周才有结果吧，华为面试就告一段落了。。然而，我又收到了4.3笔试网易测试工程师的通知………… 更新：华为面试没过。。。。我当时面完感觉还可以，现在分析分析原因可能是没带简历，电子简历上也没填任何经历。导致印象不好吧。还有就是笔试因为有课我并没有全做，只做了一个。再找其他原因可能是性格测试和面试官当时问的问题并没有给出他想要的答案吧。。。。反正是G了。。果然面试还是很难得。 顺带提一句网易游戏的机试题是真的难。。。感觉这个暑期估计没得实习可以去了，初步打算好好搞个科研，秋招再找一下工作吧。找不到就积极准备选调生，毕竟这个应该不需要太多的实习经历。]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>实习</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写文章也太麻烦了]]></title>
    <url>%2FAston.github.io%2F2018%2F03%2F27%2F%E5%86%99%E6%96%87%E7%AB%A0%E4%B9%9F%E5%A4%AA%E9%BA%BB%E7%83%A6%E4%BA%86%2F</url>
    <content type="text"><![CDATA[写了几篇博客才发现，写技术博客是真滴难本来是打算平时写写技术博客，记录一下自己学习的东西，除了方便查阅，和其他人分享一下经验与遇到的坑，最主要的用途其实还是面试的时候“啪”往面试官脸上一拍，露出“绝世强者”的笑容。 但写了几天才发现，写博客是真滴难。有可能是我自己太菜的原因，看到什么不会的都想解释一番，一写就是半小时，一写就是半小时，结果几天下来，自己的项目和学习的进度及其缓慢。内容的宽度倒是挺宽，杂七杂八啥都有，但是就是没有个有用的。在一个就是我这些写的基本都是自己纯手打，除了部分段落和代码是粘贴的，几乎每篇我都自己加了自己的理解，所以导致一天除了学习，有一半时间都用来记录了，成为了一名光荣的打字员。 所以就以上情况，我觉得是时候改变自己博客的写作方向了。给博客制定一些明确的规则和风格。 网上资料特别丰富的教程及技术的方向就不记录了，例如我之前写的那个hexo建博客的那篇，感觉就没啥用，写的还没人全。不过呢，可以记录一下技术及方法，直接粘过来，当做字典用。这一类category全部命名 ”参考“。 英语类直接取消，从薄荷阅读荡下来感觉比抄写效率还低，直接放弃。 每天用于记录的时间保持在所有学习时间的1/5左右，写作原则——简洁，不要夹带自己那么多私货。 技术博客主要记录三方面：自己的项目、学习总结、按照别人方案搞遇到的坑。category 命名 “技术博文” 大方向上，只保持三个板块：技术博文，参考，感悟。 嗯，总结的差不多了，感觉明天又是朝气满满的一天呢。 ps：感觉自己这种阶段性flag经常立，经常崩，经常搞着搞着偏离的主线，时间紧任务重，毕业好难。 再立个flag，实习能找就找，找不到安心自学，在毕业之前没实习没工作至少把项目做好一点。]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>烦</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[类和对象]]></title>
    <url>%2FAston.github.io%2F2018%2F03%2F27%2F%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[对象（object）广义上是指内存上一段有意义的区域。狭义上是指把一组数据结构和处理他们的方法结合起来叫做对象。把相同行为的对象叫做类（class），通过类的封装（encapsulation）隐藏内部细节，通过继承（inheritance）实现类的特化（specialization）/泛化(generalization)，通过多态（polymorphism）实现基于对象类型的动态分派。面相对象（objected oriented）类：可以理解为可以量产对象，但是产生的可以不同封装：就是知道名字可以使用，但是具体怎么实现的不知道继承：子类能继承父类的功能例如12345class Mylist(list): passa = Mylist()a.append(5)这里Mylist 就继承了list的功能。 目前就我的理解，可以把类比作汽车，那停和启动就是方法，函数中通常不会封装数据，只是执行某种功能但是类中有。多态：是同一个功能函数在不同的类里执行的功能可能不同（我感觉这就是废话，为什么会当成一个特征。）python中的类的self其实就是相当于c++的this指针，对象自身会当做第一个参数传给self，self相当于每个房子的门牌号。类相当于设计图纸。对象就是长得很像但不是一个的房子。类：都是人，对象：但人又都不相同类中可以内置一些方法，用双下横线包围__init__(self，param1,param2=&#39;example&#39;)你不写他也有个__init__(self)和c++的构造函数一样name mangling:在私有变量或者函数前面加上两个_就可以了1234class Person: __name ="小甲鱼" def getName(self): returen self.__name 直接调用 p.name是不行的用p.getName() p._Personname就行 python类没有权限控制，所以是伪私有。 123class Turtle: def climb(self): print('ddasdfa') 当程序员不想把同一段代码写几次，他们发明了函数解决了这种情况。当程序员已经有了一个类，而又想建立一个非常相近的类，可以用继承的方法。 self是对象自身作为的第一个参数传入。 如果我们不希望对象的属性和方法被外部直接引用，我们可以设置私有变量或者函数，但实际上还是引用的到。 类在实例化后init(self)函数会被自动调用，init 是initialize的缩写。 继承中,子类方法如果和父类方法（即函数）重名，则子类方法会把父类方法给覆盖掉。所以这里面有两种技术可以实现不覆盖。一种是Fish.__init__(self)调用父类fish，其实就等于Fish.__init__(shark),shark 是子类方法。另一个更好用得是super(),多重继承时特别好用。super.__init__()多重继承虽然很好用，但是容易引起代码混乱，所以在不确定的时候，最好不要用多重继承，会造成不可预见的bug，例如菱形继承或者叫做钻石继承，这个很致命。 继承机制为程序员带来的明显的好处就是写的代码量少了。 当子类定义了与父类相同名字的属性或方法时，python不会删除父类的方法或属性，但在对象调用子类继承父类时，其父类的方法或属性会被子类方法或属性给覆盖。 如果要屏蔽父类中的某些属性，利用覆盖机制就可以，将那条方法写在子类后面，写一个pass就可以 super超级的地方就在于不用再将父类的名字再打一遍，而且适用于多重继承。同时，由于你不用给出基类的名字，这就意味着如果你需要改变类继承关系，你只需要改变class里的父类即可。而不用去各个代码中寻找父类的名字。 init(self)方法里不能有return ，因为这个方法不能反悔除None以外的任何对象，主要是用来给一些初始化定义。 1234567891011121314151617181920212223242526import mathclass Point(): def __init__(self, x=0, y=0): self.x = x self.y = y def getX(self): return self.x def getY(self): return self.yclass Line(): def __init__(self, p1, p2): self.x = p1.getX() - p2.getX() self.y = p1.getY() - p2.getY() self.len = math.sqrt(self.x*self.x + self.y*self.y) def getLen(self): return self.lenp1 = Point(1, 1)p2 = Point(4, 5)line = Line(p1, p2)print(line.getLen()) 上面代码中并没有用到继承，传入line的是两个对象，对象自带属性和方法，在传入其他类后对其进行操作时可直接调用对象的方法和属性。 ###组合组合是指把没有直接关系的类放在一起叫做组合, in another word,所谓组合就是把类和实例化放在一个新的类里面，这样就不用继承了。123456789101112class Turtle: def __init__(self,x): self.num = xclass Fish: def __init__(self,y):class Pool: def __init__(self,x,y): self.turtle = Turtle(x) self.fish = Fish(y) def print_num(self): print("there were %d turtles and %d fish"%(self.turtle.num,self.fish.num)) 这里不能直接用self.turtle, 因为 self.turtle = Turtle(x) 是一个实例化对象，并不是一个实际的方法或属性 ###Min-in 编程机制 mixin 是一种开发模式，是一种将多个类中的功能单元进行组合利用的方式，这听起来有点像类的继承，但是不太一样。通常mixin不作为任何类的基类，也不关心和什么类一起使用，而是在运行时动态的同其他的零散的类一起组合使用。 下面提到的多继承和bases方法都是基于这个机制。 ####多继承Python支持多继承，即一个子类可以继承多个父类，利用这个特性，我们就可以利用mixin机制实现ab功能的组合。 ####bases ：一种类的组合机制多继承的实现会创建出新的类，在我们希望给A类添加B类的功能时，我们可以利用python元编程特性实现。元编程meta-programming（这古文翻译，不懂古文的还真有点看不懂），写用来生成代码的代码。感觉就是一种手工压缩代码量的感觉，元编程操作的对象是其他代码。继续说多继承，举个栗子：1234567891011121314151617class A: def get_a(self): print 'a'class B: def get_b(self): print 'b'class C(A, B): passc = C()c.get_a()c.get_b()A.__bases__ += (B,)a.get_b() 其实bases也是继承的机制，，因为bases属性存储了类的基类。因此多继承的方法也可以这样实现。12345class C: passC.__bases__ += (A, B, ) 还有另一种方式：插件方式，比较麻烦，如果用到，再看不迟dict。参考链接 类、类对象和实例对象。类属性和类对象相互绑定，所以实例对象改变不会影响类对象，实例对象改变会覆盖类方法1234567891011121314151617181920212223class C: count = 0a=C()b=C()c=C()a.count0b.count0c.count0c.count+=10c.count0C.count0C.count+=100a.count100b.count100c.count10 一个整形是不能调用的，属性名和方法名相同，属性会覆盖方法。 类的定义要少吃多餐，不要在一个类中放上所有想到的方法和属性，尽量利用继承和组合机制进行扩展类。 有不同的磁性的名字命名类。名词动词词性分开。 1234567&gt;&gt;&gt; c = C()&gt;&gt;&gt; c.x =1&gt;&gt;&gt; c.x()Traceback (most recent call last): File "&lt;pyshell#24&gt;", line 1, in &lt;module&gt; c.x()TypeError: 'int' object is not callable 什么时候用组合，什么时候用继承？根据实际的应用场景确定。简单地说，组合适用于“有一个”的场景，继承适用于“是一个”的场景。例如有一个鱼，有一个猫有一个大象。鲨鱼是鱼，青瓜是瓜。 类对象是什么时候产生的？-当你这个类定义完的的时候，类定义就变成类对象。python是一切皆对象，可以用‘类名.属性’或‘类名.方法’来调用类对象。 ####设计一个跟踪一个类里有多少实例被创建的代码1234567891011121314151617181920class C: count = 0 def __init__(self): C.count += 1 def __del__(self): C.count -= 1 #实际上我不懂这一段代码&gt;&gt;&gt; a = C()&gt;&gt;&gt; b = C()&gt;&gt;&gt; c = C()&gt;&gt;&gt; C.count3&gt;&gt;&gt; del a&gt;&gt;&gt; C.count2&gt;&gt;&gt; del b, c&gt;&gt;&gt; C.count0 ###与类相关的BIF（内置函数）issubclass(class,classinfo)一个类是自身的子类；classinfo可以使类对象组成的元组，只要class与其中任何一个候选类的子类，则返回True object 是所有类的子类issubclass(B,object) isinstance(object,classinfo)检查是否是实例对象第一个如果不传入实例对象，全是false可以传入一个元组类 BIF 比较斯文的访问属性hasattr(object,’name’)getattr(object,name[,default])getattr(a,’x’,’你所访问的属性不存在’)setattr(object,’name’,’value’)delattr(object,’name’)property(fget =None,fset=None,fdel=None,doc =None) 返回值是一个属性a = property(getsize,setsize,delsize)123c.a = 18 del c1.a c.a property 主要功能是提供一个借口，再调用是只需要知道 a 不用知道里面改变了啥。 ###描述符描述符就是将某种特殊类型的类的实例指派给另一个类的属性。get set del是特殊类型property就是一个描述符类。可以自己定义一个instance 是实例拥有者的实例对象，owner 是实例拥有者12345678910111213141516171819202122class Myproperty: def __init__(self,fget = None,fset=None,fdel =None): self.fget=fget self.gset = gset self.del=fdel def __get__(self,instance,owner): #不赋值直接调用时 reutrn self.fget(instance) def __set__(self,instance,value): #赋值时所调用的 self.fset(instance,value) def __delete__(self,instance): self.fdel(instance)class C: def __init__(self): self._x = None def getX(self): return self._x def setX(self,value): self._x=value def delX(): del self._x x = Myproperty(getX,setX,delX)#可以说myproperty是x的描述符 class myproperty（）是描述符类 12345678910111213141516171819202122class Celsius: def __init__(self,value=26.0): self.value=float(value) def __get__(self,instance,owner): return self.value def __set__(self,instance,value): self.value = float(value)class Fahrenheit(): def __get__(self,instance,owner): return instance.cel*1.8+32 def __set__(self,instance,value): instance.cel = (float(value)-32)/1.8class Temperature: cel = Celsius() fah = Fahrenheit()tmp=Temperate()tem.cel= 30 这是对Tem实例的cel属性进行赋值执行__set__方法然后instance.cel也就是是tem.cel也就是说这里面赋值其实都是给cel ，fah执行的只是给这个数进行了转换 定制序列协议与其他编程语言中的接口相似，他规定你哪些方法必须要定义。然而python中更像是一种指南。定制序列就是定制容器，数据容器就是列表list，词典dict，元组tuple.如果你希望你的容器不可修改你只需要定制 len() and getitem()如果你希望你的容器可修改还得加上setitem() and delitem()[x for x in arg]]]></content>
      <categories>
        <category>参考</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>概念</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法]]></title>
    <url>%2FAston.github.io%2F2018%2F03%2F27%2Fmarkdown%20grammer%20learning%2F</url>
    <content type="text"><![CDATA[Markdown Grammer Learning目标：易读易写特点： 与word相比较而言极其轻量级，在操作上习惯后会觉得比word简便。在跨平台方面更出色。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”（具体意义就是可以直接往网上发不用再排版，还记得你从word往网站上发布时需要重新排版的情形吗？）。简单点，用Markdown写作就是能够实现边输文字边排好版，根本用不上鼠标，根本不用苦苦地二次选中编辑，排出的版面又简约又舒适。（对我而言就是显得更帅一点，哈哈）经过我的测试，不同的软件里集成的markdown语法略有区别，可能是markdown版本不同，例如我使用的markdownpad2就必须在字后面加两个空格才能分段，有道云和简书里直接敲回车就好了，大体上还是一致的。 a trick: markdown 是一种标记语言，他名字的由来就是起源于 markup（中文意思‘标记’），类似的情况还包括 copyright 和copyleft（反版权）。 语法：参考链接 实例1：展示两种标题语法 一种是setext，利用底线形式，“=”是一级标题，“-”是二级标题 另一种是atx，在行首加入#（1-6个），‘#’数越多题目越大 区块则是利用“&gt;”来表示，区块还有更全面的使用方式，详情请见参考链接 主要用来引用 123456789101112131415161718A First Level Header====================A Second Level Header---------------------Now is the time for all good men to come tothe aid of their country. This is just aregular paragraph.The quick brown fox jumped over the lazydog's back.### Header 3&gt; This is a blockquote.&gt; &gt; This is the second paragraph in the blockquote.&gt;&gt; ## This is an H2 in a blockquote A First Level HeaderA Second Level HeaderNow is the time for all good men to come tothe aid of their country. This is just aregular paragraph. The quick brown fox jumped over the lazydog’s back. Header 3 This is a blockquote. This is the second paragraph in the blockquote. This is an H2 in a blockquote 还有一种方式就是敲一个‘&gt;’ 后面接着打也是一样的 比如这样的下一行还是引用 多个“&gt;&gt;&gt;”代表的层级例如 我是大好人 你是大好人 他是大好人 修辞、强调与换行及首行空两格1234567Some of these words *are emphasized*.Some of these words _are emphasized also_.Use two asterisks for **strong emphasis**.Or, if you prefer, __use two underscores instead__换行=在句子末尾敲多余两个空格+回车置于首行缩进。。。只有替代方法没有非常方便的方法，例如转成全角敲两个空格或者利用&amp;#160;(试了一下不理想，还是老老实实敲空格吧) Some of these words are emphasized also.Use two asterisks for strong emphasis.&#160;Or, if you prefer, use two underscores instead 列表无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，记住一个就可以了，使用星号jia加号和减号：1234567891011* Candy.* Gum.* Booze. + Candy.+ Gum.+ Booze. - Candy.- Gum.- Booze. Candy. Gum. Booze. Candy. Gum. Booze. Candy. Gum. Booze. 有序的列表则是使用一般的数字接着一个英文句点作为项目标记，序表也可以进行嵌套：123451. Red 1. 嵌套 2. Green3. Blue Red Green Blue A list item. asdfasdaasfdasdfsdafasdfadsfdasfdasfasfdadsfgasdgdsagasdgsadgasdgasdgadfdsaffff Another item in the list. ​ 链接分为两种： 行内 和 链接 。 都是用角括号转换成链接的形式行内形式是直接在后面用括号直接接上链接1This is an [example link](http://example.com/). This is an example link. 你也可以选择性的加上 title 属性(就是鼠标放在链接上面时出现的小框里的字)：1This is an [example link](http://example.com/ "With a Title"). This is an example link.参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：123456I get 10 times more traffic from [Google][1] than from[Yahoo][2] or [MSN][3].[1]: http://google.com/ "Google"[2]: http://search.yahoo.com/ "Yahoo Search"[3]: http://search.msn.com/ "MSN Search" I get 10 times more traffic from Google than fromYahoo or MSN. 图片和链接的形式很像,就是在角括号前面需要多加一个“!”1![alt text](/path/to/img.jpg "Title") 代码在一般的段落文字中，你可以使用反引号`来标记代码区段，区段内的 &amp;、&lt; 和 &gt; 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：1234I strongly recommend against using any `&lt;blink&gt;` tags.I wish SmartyPants used named entities like `&amp;mdash;`instead of decimal-encoded entites like `&amp;#8212;`. I strongly recommend against using any &lt;blink&gt; tags. I wish SmartyPants used named entities like &amp;mdash;instead of decimal-encoded entites like &amp;#8212;. If you want your page to validate under XHTML 1.0 Strict,you’ve got to put paragraph tags in your blockquotes: For example.There is a literal backtick (`) here. A single backtick in a code span: ` A backtick-delimited string in a code span: `foo` 反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 标签），你可以在星号的前面加上反斜杠： * literal asterisks * 表格1234567891011121314151617Name | Academy | score - | :-: | -: Harry Potter | Gryffindor| 90 Hermione Granger | Gryffindor | 100 Draco Malfoy | Slytherin | 90| a | b | c ||:-------:|:------------- | ----------:|| 居中 | 左对齐 | 右对齐 ||=========|===============|============|打那么多---主要是为了好看。。可以和第一个一样的形式作者：欧薇娅链接：https://www.jianshu.com/p/b03a8d7b1719來源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 a b c 居中 左对齐 右对齐 ========= =============== ============ Name Academy score Harry Potter Gryffindor 90 Hermione Granger Gryffindor 100 Draco Malfoy Slytherin 90 语法说明： 不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行代表一个表格行； 列与列之间用管道符号 “|” 隔开，原生方式的表格每一行的两边也要有管道符。 可在第二行指定不同列单元格内容的对齐方式，默认为左对齐，在 “-” 右边加上 “:” 为右对齐，在 “-” 两侧同时加上 “:” 为居中对齐。 视频其实markdown是不支持视频的，现在的通用做法是调用html语言的iframe框架或者插入视频的链接。 任务列表12345这是文字……- [x] 选项一- [ ] 选项二 - [ ] [选项3] 这是文字…… 选项一 选项二 [选项3] 分隔符123***---* * * * 角标和链接的方式有点像12Markdown[^1][^1]: Markdown是一种纯文本标记语言 // 在文章最后面显示脚注 Markdown[^1][^1]: Markdown是一种纯文本标记语言 // 在文章最后面显示脚注 markdown与法不止这些，但是我看了一下其他的，很繁琐且不常用，建议碰到时在考虑学习，我记录的这些在平常记录或者写写文章就足够用了]]></content>
      <categories>
        <category>参考</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>概念</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2FAston.github.io%2F2018%2F03%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[This blog is a test ,and is my first blog. Hello, outside people]]></content>
  </entry>
  <entry>
    <title><![CDATA[利用github+hexo+next建立个人博客]]></title>
    <url>%2FAston.github.io%2F2018%2F03%2F26%2F%E5%88%A9%E7%94%A8github-hexo-next%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[建立个人博客的经历真是很多很多坑啊…如果顺利的话，正常人应该两个小时就足够了，我是各种手贱折腾，捣鼓了好多天才弄完，emm…我就顺便记录一下我还记得的坑把。你只需要按照我的步骤走就肯定没问题，可能你看到hexo，git什么不太懂，我会在步骤之间把其中涉及的概念我会一一解释。 首先是用自己的github（github我就不解释了啊，查阅百度，我感觉就是一个存代码的网盘，不过可以通过时间线查看版本）建立一个repository，这个就是我们存放我们博客的文件夹啦。 这里注册的仓库名要注意了，同学们，如果呢你想让你的博客网站叫做 yourgithubid.github.io 就要起和你的yourgithubID一样的名字的仓库，即repository name 填 username.github.io，如果呢你不在乎或者有买一个域名绑定的打算，就可以忽略，随便起一个random.github.io 之后访问可能就是这个网址了 yourgithubID.github.io/random.github.io. 建好了之后先放着，去搞hexo，hexo是一个快速简洁高效的静态博客框架，这里静态动态的意思就是，静态不会出现信息的交互，例如一直更新的天气天气预报，新闻啊啥的，存一部分乱七八糟一股脑扔到网上就不管了。博客也基本不需要动态，所以hexo是最佳选择，其实还可以用jekyll(不好用，教程少，hexo大法好)。安装hexo之前得安装点hexo的环境，因为hexo是node.js编的，所以得把这个东西装上，例如你运行python脚本得装python吧。然后还要装Git，这个东西呢类似你的cmd，但是继承了一些linux shell的本领以及一些他git自己的命令，你可以忽略直接无脑装装装。 node.js Git安装完成之后，剩下就直接粘代码进git bash 里就好了。 (妈的，markdown插图片真的贼鸡儿麻烦，得考虑一下别的编辑方法了)1$ npm install -g hexo-cli 可以参照官方文档安装node.js 和git 官方文档也有 hexo 好了，这时候看一下你的hexo安装成功了没有,在gitbash里1$hexo 看一下有木有东西，有东西就安装成功了，没东西你自己在翻翻文档。 下一步：建站 名字挺唬人，其实就是建个文件夹。123$ hexo init myGitPages$ cd myGitPages$ npm install 运行完之后，会出现很多文件和文件夹介绍一下主要的，themes是主题文件夹，网上有很多，我用的是next，这个一会再说。source就是你将会往你的github传的文件啦，文章图片啥的，_config.yml 是配置文件，你可以通过编辑这个文件来个性化你的博客，具体细节呢，我先写写看再决定写不写。package.json是应用程序信息。有默认配置的一些组件，可以自己根据需要添加或移除，反正我是看不懂json..就不改了。scaffolds 模板文件夹。建立新文章时，hexo会根据scaffold来建立文件。其他的我也不知道干啥用的，不重要（但是不能删）。好了基本弄完了，剩下的主题，你可以根据自己需要下载，hexo官网有很多，但是我感觉大部分人用的都是yilla和next，就以next为例。next这里面有详细的使用说明，我就不细说了。嗯 最后，就是要发布文章了，先杆状一个插件1$ npm install hexo-deployer-git --save 这个插件是用来发布到git上的。然后12hexo generate #形成hexo server #用来本地预览，这运行完会出现一个网址，你把它粘到网站里运行一下试试。 大概是localhost：4000 这种样子的。 如果预览成功，好这还不算完，由于你要往网上传东西，你得得到人家github许可才行呀，所以接下来就是要做git的身份认证。SSH授权打开gitbash 输入ssh-keygen -t rsa 连敲三下回车这样就会在C盘用户目录下生成id_rsa和id_rsa.pub这两个文件，前者是密钥，后者是公钥，用记事本打开id_rsa.pub，复制其中的全部内容，添加到GitHub上，这样本地的id_rsa密钥就可以和GitHub上的id_rsa.pub公钥进行配对，授权成功SSH key添加之后，就可以在本机git bash中进行测试，输入ssh -T git@github.com进行测试，返回Hi username ！You’ve successfully ……说明你已经成功啦！ 修改上传设定还记得文件夹里的_config.yml吗打开它，修改 （主义冒号后面必须跟空格）deploy: type: git repo：https://github.com/username/username.github.io.git然后发布就可以了1hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy 第一次访问可能需要密码。 后记我在测试各个主题的时候碰到了很多问题，例如next老师莫名崩溃说找不到什么/.swig，后来发现就是更改_config.yml时候格式不标准就GG了，所以你在改这些格式的时候，要千万注意，必须严格按照要求。 其实还有很多很细节的东西，我实在是懒得写了,都没时间搞科研了…以后如果碰到这种有很多教程的东西，我还是直接粘过来把，不过图片没法粘贴是个问题，再说再说，但是我可以帮忙回答遇到的问题，如果有人看的话。。。。。 如果有什么问题可以留意问我哦~]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每天一点点（一）]]></title>
    <url>%2FAston.github.io%2F2018%2F03%2F26%2F%E6%AF%8F%E5%A4%A9%E4%B8%80%E7%82%B9%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1.「rise」：在文中指“站起来，起立”，常见意思为“上升，增长”。 原句：The gentleman half rose from his chair to greet me. 2.「nature」：在文中的意思为“本质、性质”，常见意思为“自然”。 原句：But also because the highly unusual nature of the story makes me…例句：They asked a lot of questions about the nature of our democracy.(民主主义)democratic democray democrat democratize 3.「puff」：在文中与out组成词组「puff out one’s chest」，表示“挺起胸膛”常见意思为“喘粗气、使膨胀”。 原句：The client puffed out his chest with an appearance of some pride…例句: Henry puffed out his chest proudly.Kim Sanpang puffed out his chest proudly with clapping his hands. 4.「immediately」在文中的意思是“紧靠地、贴近地”，常见的意思为“立刻，马上”。 原句：The fish that you have tattooed immediately above your right wrist( 手腕 ) could only have been done in China.例句：He sat in the seat immediately in front of me. 句子解析 “I know, my dear Watson, that you share my love of all / that is outside the normal routine of everyday life. You have shown your relish for it by the enthusiasm /which has prompted you/ to write down and, if I may say so, somewhat to embellish so many of my own little adventures.” prompt：迅速敏捷的， 促进激励 付款期限温馨提示relish： 食欲 开胃小菜 调味品 盼望期待享受品味加作料 第一句话中：「share」表示“共同拥有（某种看法、特质或经济）”，「share my love of all」则可以理解为“你同我一样喜欢”。 第二个「that」 引导的从句是修饰前面的「my love of all」。 所以这句话大意为：亲爱的Watson，我知道你同我一样喜欢破案，而不是那些日常生活中的俗套。 第二句话中：「show relish for something」表示“对…感兴趣，表现出对…的喜爱”。文中即：你对它（破案）很感兴趣。 「which」引导的从句是修饰「you have…enthusiasm」，在which从句中，「prompt sb. to do sth.」表示“激励（促使）某人做某事”。文中即：…促使你满腔热情地把这些东西都记录下来。 「if I may say so」是插入语，表示“如果我可以这样说；如蒙允许”。文中即：如果你不介意的话，我要说，你这样做是为我自己的许多小小的冒险事业增添光彩（embellish）。 所以这句话的大意为：你那么满腔热情地把这些东西都记录下来，可见你对它们很感兴趣。如果你不介意的话，我要说，你这样做是为我自己的许多小小的冒险事业增添光彩。 “You will remember my saying the other day,/that for strange effects and extraordinary events, we must go to life itself, /which is always far more daring than any effort of the imagination.” 这句话的主干为：You will remember my saying the other day. 即：你应该记得前几天（the other day）我说的那段话吧。 that从句部分是补充说明前面的「my saying」，其中which引导的从句是修饰前面的life itself，即：生活本身远比任何大胆想象更富有冒险性（daring）。 所以that从句部分的大意为：为了获得新奇的（strange）效果和不同寻常的（extraordinary）事件，我们必须深入生活，因为生活本身远比任何大胆想象更富有冒险性（daring）。 这段话是 Sherlock 跟Watson 对于创作与生活的一些探讨，而 Watson 对此观点暂时是持怀疑态度的，所以他后面说他当时斗胆持怀疑态度（being brave enough to express some doubts）。 You have heard me remark/ that the strangest examples are very often connected not with the larger but with the smaller crimes, /and occasionally occur in cases/ where there is room for doubt /as to whether there has been a crime at all. 这句话的主干为：You have heard me remark. 即：你已经听我说过（remark）… ； 在从句部分「that the strange … a crime at all」中，包含由and 构成的两个并列句子： （1）「be connected not with…but with…」表示“和……无关，而和……有关”。其中「not…but…」表示“不是…而是…”。这句话的大意为：最奇怪的事件通常都不是那些大的犯罪活动，而是那种不起眼的犯罪。 （2）「and occasionally…crime at all」的主干为：and occasionally occur in cases. 即：而且偶尔有这样的案件。 where 引导的从句是修饰cases，其中「room」表示“可能性、余地”。「there is room for doubt as to …」则表示“对…存有疑虑，怀疑…”。文中即：怀疑是否真的有人犯了罪。 所以这句话的大意为：而且偶尔会有这样的案件，而你怀疑是不是真的有人犯了罪。 “Beyond the obvious facts / that he has at some time done manual labor, that he is a Freemason, that he has been in China, and that he has done a lot of writing lately, / I can deduce nothing else.” 这句话的主干为：Beyond the obvious facts I can deduced nothing else. 「beyond」表示“除…之外（用于否定句）”，这句话的意思是：除了这些显而易见的（obvious）情况之外，我推断不出别的。 「that he has… writing lately」其中包含由that引导的从句，都是解释说明「the obviously facts」，即：他干过一段时间的体力活（manual labor），是个共济会会员（Freemason），去过中国，最近（lately）写过不少东西。 拓展：「Freemason」指的是一个遍布全球的叫做 Freemasonry 的兄弟会的成员，大约18世纪的时候，一些石匠组织起了这个兄弟会，刚开始是工作上的交流，慢慢地变成了社交组织。一般这种组织都会有很多规则要遵守，而且还会有一些秘密活动或者仪式，还有个有趣的点，就是Sir Arthur Conan Doyle本人也是 Freemasonry 的成员。下图是一个典型的 Freemasonry 的标志： I won’t insult your intelligence by telling you how I read that, especially as, rather against the strict rules of your organization, you use an arc-and-compass breastpin. 前半句中「insult」表示“侮辱”，文中即“我不想告诉你我是如何看出来的，这会侮辱你的智商(intelligence)” 扩展一下：「insult」也可以做名词，表示“侮辱、冒犯”。e.g. Some advertising is an insult to our intelligence. 有些广告对我们的智商是一种侮辱。 「against rules」表示违反规则，这里是说“尤其（rather）违反你们组织规则…”。 当被客户问到 Sherlock 是如何看出他是 Freemason 的时候，Sherlock 说我不想侮辱您的智商，但是您看看您不顾你们组织的严格规定，把这个圆规加直尺（共济会的标志）一样的胸针戴出来了。看来我们的Wilson 先生并不是个严格遵守共济会规定的人。 TO THE RED-HEADED LEAGUE:the will of the late Ezekiah Hopkins…at the offices of the League, 7 Pope’s Court, Fleet Street. Wilson 先生拿出了报纸上刊登的一篇广告，说是根据已故的 Ezekiah Hopkins 的遗愿，有一个职位空缺需要招一个红头发、身心健康、21岁以上的男士，然后写上了面试的时间地点。 「late」在这里指”已故的”，比如 her late husband，她已故的丈夫；Fleet Street 这个地址是真实存在的，但现在已经找不到 Pope’s Court；另外广告中提到的 4 pounds a week 的工资，相当于现在400英镑的周薪，难怪Wilson会被这个广告吸引。1英镑=8.8857人民币元。 “It is The Morning Chronicle of April 27, 1890. Just two months ago.” Sherlock 让 Watson 看看报纸的名字和日期。这里出现了写作上的一个时间偏差，报纸是4月27号的，Watson 说是两个月前的报纸，但文章开头说是秋季里的某一天，明显6月底不会是伦敦的秋季。 I have a small pawnbroker’s business at Coburg Square, near the City. It’s not a very large one, and in the last few years it has not done more than just give me a living. 「have a business」表示“做生意”，这句话的大意为：我在市区附近的Coburg广场做当铺生意（pawnbroker’s business）。 第二句话中：「one」指代business。not more than表示“仅仅、只不过”。这句话的大意为：生意规模不大，在过去几年仅仅可以维持生计而已。 You seem most fortunate in having an employee /who will take less than the full market price. It is not a common experience among employers. 第一句话中：「be fortunate in doing sth」表示“做某事很幸运”。e.g. She felt fortunate in being able to please herself where she lived. 在自己住的地方能够随心所欲，她觉得很幸运。 who引导的从句是修饰前面的「employee」，这句话的大意为：你能以低于（less than）市价的工钱雇到一个伙计（employee），看起来可是非常幸运了。 第二句话「It is …employers.」的大意为：这在像你这样年纪的雇主（employer）当中，可不是一个寻常的事。 当说到自己的一个伙计愿意只拿一半工资，也要留在当铺工作的时候，Sherlock 说 Wilson 特别幸运（most fortunate），居然找到一个愿意拿比市价少的工资的员工，这样的经历大多数老板可不会遇到。所以 Sherlock 也关注到了这个不同寻常的现象。 “He is always taking photographs when he ought to be improving his mind, and then diving down into the cellar like a rabbit into its hole to develop his pictures. 「improve one’s mind」表示“振作精神”，在文中可以理解为“好好看守当铺”。文中即：当他本应好好看当铺的时候，他却总是在摄影拍照。 「like a rabbit into its hole」表示“动如脱兔”。「develop」在文中表示“冲洗”，常见的意思为“发展，形成”。文中即“然后像兔子跳回窝里一样似的冲到地下室冲洗胶片”。 这段话运用了比喻，生动形象的表现出Spaulding冲到地下室的急切之情。当他本应该振作精神（好好看当铺时候）他却总是在摄影拍照，然后像兔子跳回窝里一样似的冲到地下室冲洗胶片。 We live very quietly, sir, the three of us; and we keep a roof over our heads and pay our debts, if we do nothing more. 「keep a roof over our heads」 在文中可理解为“住在一个房檐下，一起生活” 【if we do nothing more】 则表示“除此之外没别的了”。 这段话的大意为：我们三个人一起过着安静的生活；我们住在一起，一起还债（pay our debts），除此之外没有别的了。 今日短语 call upon sb 拜访某人be connected not with…but with… ，和……无关，而和……有关occur in cases ，还有种情况是……there is room for doubt… ，在……方面存有疑虑 。far from 远离；远非；完全不puff out one’s chest 挺起胸膛to the best of my belief 据我所知on account of sth 由于，因为..out of ordinary 不寻常a roof over one’s head 住处，栖身之处]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
</search>
